generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

enum ProblemStatusType {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum RankingType {
  OVERALL
  MONTHLY
  WEEKLY
}

enum RankingScope {
  BATCH
  COLLEGE
}

model College {
  id           String  @id @default(cuid()) @map("id")
  name         String
  email        String  @unique
  passwordHash String  @map("password_hash")

  // Relations
  batches      Batch[]
  users        User[]
  rankings     Ranking[]

  @@map("college")
}

model Batch {
  id         String  @id @default(cuid()) @map("id")
  name       String
  collegeId  String  @map("college_id")

  // Relations
  college            College         @relation(fields: [collegeId], references: [id])
  teacherBatch       TeacherBatch[]
  studentBatch       StudentBatch[]
  problemAssignments ProblemAssignment[]
  rankings           Ranking[]

  @@map("batch")
}

model User {
  id                   String  @id @default(cuid()) @map("id")
  name                 String
  email                String  @unique
  passwordHash         String  @map("password_hash")
  role                 Role    @default(STUDENT)
  collegeId            String  @map("college_id")
  studentEnrollmentId  String? @unique @map("student_enrollment_id")
  teacherEnrollmentId  String? @unique @map("teacher_enrollment_id")
  studentStreak        Int     @default(0) @map("student_streak")

  // Relations
  college              College             @relation(fields: [collegeId], references: [id])
  teacherBatch         TeacherBatch[]
  studentBatch         StudentBatch[]
  problemsAdded        Problem[]           @relation("ProblemAddedBy")
  problemAssignments   ProblemAssignment[]
  problemStatuses      ProblemStatus[]
  rankings             Ranking[]
  platformAccounts     StudentPlatformAccount[]

  topicsCreated        Topic[]             @relation("UserTopicsCreated")
  subtopicsCreated     Subtopic[]          @relation("UserSubtopicsCreated")

  @@index([collegeId])
  @@index([role])
  @@index([studentStreak])
  @@map("user")
}

model StudentPlatformAccount {
  id         String   @id @default(cuid()) @map("id")
  userId     String   @map("user_id")
  platformId String   @map("platform_id")
  handle     String   // student's id/username on the platform

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  platform  Platform  @relation(fields: [platformId], references: [id])

  @@unique([userId, platformId])          // Each user can have at most one account per platform
  @@index([handle])
  @@map("student_platform_account")
}

model TeacherBatch {
  id        String @id @default(cuid()) @map("id")
  teacherId String @map("teacher_id")
  batchId   String @map("batch_id")

  // Relations
  teacher   User  @relation(fields: [teacherId], references: [id])
  batch     Batch @relation(fields: [batchId], references: [id])

  @@unique([teacherId, batchId])
  @@map("teacher_batch")
}

model StudentBatch {
  id        String @id @default(cuid()) @map("id")
  studentId String @map("student_id")
  batchId   String @map("batch_id")

  // Relations
  student   User  @relation(fields: [studentId], references: [id])
  batch     Batch @relation(fields: [batchId], references: [id])

  @@unique([studentId, batchId])
  @@map("student_batch")
}

model Topic {
  id         String  @id @default(cuid()) @map("id")
  name       String
  createdBy  String  @map("created_by")

  creator    User    @relation("UserTopicsCreated", fields: [createdBy], references: [id])
  subtopics  Subtopic[]
  problems   Problem[]
  @@map("topic")
}

model Subtopic {
  id         String  @id @default(cuid()) @map("id")
  name       String
  topicId    String  @map("topic_id")
  createdBy  String  @map("created_by")
  // Relations
  topic      Topic   @relation(fields: [topicId], references: [id])
  creator    User    @relation("UserSubtopicsCreated", fields: [createdBy], references: [id])
  problems   Problem[]
  @@map("subtopic")
}


model Platform {
  id        String @id @default(cuid()) @map("id")
  name      String @unique

  // Relations
  problems           Problem[]
  studentAccounts    StudentPlatformAccount[]  // Relation to student platform IDs

  @@map("platform")
}

model Problem {
  id            String     @id @default(cuid()) @map("id")
  title         String
  link          String
  difficulty    Difficulty
  platformId    String     @map("platform_id")
  topicId       String     @map("topic_id")
  subtopicId    String     @map("subtopic_id")
  addedBy       String     @map("added_by")

  // Relations
  platform           Platform           @relation(fields: [platformId], references: [id])
  topic              Topic              @relation(fields: [topicId], references: [id])
  subtopic           Subtopic           @relation(fields: [subtopicId], references: [id])
  addedByUser        User               @relation("ProblemAddedBy", fields: [addedBy], references: [id])
  problemAssignments ProblemAssignment[]

  @@index([platformId])
  @@index([topicId])
  @@index([subtopicId])
  @@index([difficulty])
  @@map("problem")
}

model ProblemAssignment {
  id             String    @id @default(cuid()) @map("id")
  problemId      String    @map("problem_id")
  batchId        String    @map("batch_id")
  assignedBy     String    @map("assigned_by")
  assignedDate   DateTime  @default(now()) @map("assigned_date")

  // Relations
  problem           Problem           @relation(fields: [problemId], references: [id])
  batch             Batch             @relation(fields: [batchId], references: [id])
  assignedByUser    User              @relation(fields: [assignedBy], references: [id])
  problemStatuses   ProblemStatus[]

  @@map("problem_assignment")
}

model ProblemStatus {
  id                     String            @id @default(cuid()) @map("id")
  problemAssignmentId     String            @map("problem_assignment_id")
  studentId               String            @map("student_id")
  status                  ProblemStatusType @default(PENDING)
  syncedAt                DateTime          @default(now()) @map("synced_at")

  // Relations
  problemAssignment      ProblemAssignment  @relation(fields: [problemAssignmentId], references: [id])
  student                User               @relation(fields: [studentId], references: [id])

  @@unique([problemAssignmentId, studentId])
  @@index([studentId])
  @@index([status])
  @@map("problem_status")
}

model Ranking {
  id             String        @id @default(cuid()) @map("id")
  studentId      String        @map("student_id")
  batchId        String?       @map("batch_id")
  collegeId      String?       @map("college_id")
  rankingType    RankingType   @map("ranking_type")
  rankingScope   RankingScope  @map("ranking_scope")
  rank           Int
  score          Int           @default(0)
  problemsSolved Int           @default(0) @map("problems_solved")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt     @map("updated_at")
  weekStartDate  DateTime?     @map("week_start_date")
  monthStartDate DateTime?     @map("month_start_date")

  // Relations
  student        User          @relation(fields: [studentId], references: [id])
  batch          Batch?        @relation(fields: [batchId], references: [id])
  college        College?      @relation(fields: [collegeId], references: [id])

  @@unique([studentId, rankingType, rankingScope, batchId, collegeId])
  @@index([rankingType])
  @@index([rankingScope])
  @@index([rank])
  @@index([score])
  @@index([batchId])
  @@index([collegeId])
  @@index([weekStartDate])
  @@index([monthStartDate])
  @@map("ranking")
}